{"ast":null,"code":"export function searchAPI(transientName, physicalPhenomena, messengerType) {\n  // Base URL for the search API. TODO: Consider moving to an environment variable.\n  const baseURL = 'https://lm-astronomy.labs.jb.gg/api/search/';\n\n  // Headers for the request.\n  const headers = {\n    'accept': 'application/json'\n  };\n  function transformTransientName(transientName) {\n    if (!transientName) return null;\n    return transientName.replace(/ANG%3A(\\d+)/, 'radius=$1');\n  }\n\n  // Convert empty inputs to null and construct the URL.\n  function constructURL(base, params) {\n    // Transform the transientName before constructing the URL.\n    params.transient_name = transformTransientName(params.transient_name);\n\n    // Map through parameters and set to null if not provided.\n    const filteredParams = Object.entries(params).map(([key, value]) => [key, value || null]).filter(([key, value]) => value !== null);\n\n    // Return base URL if no valid parameters are provided.\n    if (!filteredParams.length) {\n      return base;\n    }\n\n    // Convert parameters to a query string and replace '+' with '%20'.\n    const queryString = new URLSearchParams(filteredParams).toString().replace(/\\+/g, '%20');\n    return `${base}?${queryString}`;\n  }\n\n  // Construct the URL with the provided parameters.\n  let url = constructURL(baseURL, {\n    transient_name: transientName,\n    object_type: physicalPhenomena,\n    messenger_type: messengerType\n  });\n  console.log(url); // Debug: Log the constructed URL.\n\n  // Make the API request.\n  return fetch(url, {\n    headers\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return response.json();\n  }).then(data => {\n    console.log(data); // Debug: Log the received data.\n    return data;\n  });\n}\nexport function getMessageDetailsByID(id) {\n  const baseURL = 'https://lm-astronomy.labs.jb.gg/api/atel/';\n  const headers = {\n    'accept': 'application/json'\n  };\n  return fetch(`${baseURL}${id}/object_type`, {\n    headers\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return response.json();\n  });\n}","map":{"version":3,"names":["searchAPI","transientName","physicalPhenomena","messengerType","baseURL","headers","transformTransientName","replace","constructURL","base","params","transient_name","filteredParams","Object","entries","map","key","value","filter","length","queryString","URLSearchParams","toString","url","object_type","messenger_type","console","log","fetch","then","response","ok","Error","json","data","getMessageDetailsByID","id"],"sources":["/Users/sergo/Work/lm-astronomy/src/front/src/api/apiCalls.js"],"sourcesContent":["export function searchAPI(transientName, physicalPhenomena, messengerType) {\n    // Base URL for the search API. TODO: Consider moving to an environment variable.\n    const baseURL = 'https://lm-astronomy.labs.jb.gg/api/search/';\n\n    // Headers for the request.\n    const headers = {\n        'accept': 'application/json'\n    };\n\n    function transformTransientName(transientName) {\n        if (!transientName) return null;\n        return transientName.replace(/ANG%3A(\\d+)/, 'radius=$1');\n    }\n\n    // Convert empty inputs to null and construct the URL.\n    function constructURL(base, params) {\n        // Transform the transientName before constructing the URL.\n        params.transient_name = transformTransientName(params.transient_name);\n\n        // Map through parameters and set to null if not provided.\n        const filteredParams = Object.entries(params)\n            .map(([key, value]) => [key, value || null])\n            .filter(([key, value]) => value !== null);\n\n        // Return base URL if no valid parameters are provided.\n        if (!filteredParams.length) {\n            return base;\n        }\n\n        // Convert parameters to a query string and replace '+' with '%20'.\n        const queryString = new URLSearchParams(filteredParams).toString().replace(/\\+/g, '%20');\n        return `${base}?${queryString}`;\n    }\n\n    // Construct the URL with the provided parameters.\n    let url = constructURL(baseURL, {\n        transient_name: transientName,\n        object_type: physicalPhenomena,\n        messenger_type: messengerType\n    });\n\n    console.log(url);  // Debug: Log the constructed URL.\n\n    // Make the API request.\n    return fetch(url, { headers })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(data);  // Debug: Log the received data.\n            return data;\n        });\n}\n\nexport function getMessageDetailsByID(id) {\n    const baseURL = 'https://lm-astronomy.labs.jb.gg/api/atel/';\n    const headers = {\n        'accept': 'application/json'\n    };\n\n    return fetch(`${baseURL}${id}/object_type`, { headers })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n            return response.json();\n        });\n}\n"],"mappings":"AAAA,OAAO,SAASA,SAASA,CAACC,aAAa,EAAEC,iBAAiB,EAAEC,aAAa,EAAE;EACvE;EACA,MAAMC,OAAO,GAAG,6CAA6C;;EAE7D;EACA,MAAMC,OAAO,GAAG;IACZ,QAAQ,EAAE;EACd,CAAC;EAED,SAASC,sBAAsBA,CAACL,aAAa,EAAE;IAC3C,IAAI,CAACA,aAAa,EAAE,OAAO,IAAI;IAC/B,OAAOA,aAAa,CAACM,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC;EAC5D;;EAEA;EACA,SAASC,YAAYA,CAACC,IAAI,EAAEC,MAAM,EAAE;IAChC;IACAA,MAAM,CAACC,cAAc,GAAGL,sBAAsB,CAACI,MAAM,CAACC,cAAc,CAAC;;IAErE;IACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,OAAO,CAACJ,MAAM,CAAC,CACxCK,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK,CAACD,GAAG,EAAEC,KAAK,IAAI,IAAI,CAAC,CAAC,CAC3CC,MAAM,CAAC,CAAC,CAACF,GAAG,EAAEC,KAAK,CAAC,KAAKA,KAAK,KAAK,IAAI,CAAC;;IAE7C;IACA,IAAI,CAACL,cAAc,CAACO,MAAM,EAAE;MACxB,OAAOV,IAAI;IACf;;IAEA;IACA,MAAMW,WAAW,GAAG,IAAIC,eAAe,CAACT,cAAc,CAAC,CAACU,QAAQ,CAAC,CAAC,CAACf,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;IACxF,OAAQ,GAAEE,IAAK,IAAGW,WAAY,EAAC;EACnC;;EAEA;EACA,IAAIG,GAAG,GAAGf,YAAY,CAACJ,OAAO,EAAE;IAC5BO,cAAc,EAAEV,aAAa;IAC7BuB,WAAW,EAAEtB,iBAAiB;IAC9BuB,cAAc,EAAEtB;EACpB,CAAC,CAAC;EAEFuB,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC,CAAC,CAAE;;EAEnB;EACA,OAAOK,KAAK,CAACL,GAAG,EAAE;IAAElB;EAAQ,CAAC,CAAC,CACzBwB,IAAI,CAACC,QAAQ,IAAI;IACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;IACVR,OAAO,CAACC,GAAG,CAACO,IAAI,CAAC,CAAC,CAAE;IACpB,OAAOA,IAAI;EACf,CAAC,CAAC;AACV;AAEA,OAAO,SAASC,qBAAqBA,CAACC,EAAE,EAAE;EACtC,MAAMhC,OAAO,GAAG,2CAA2C;EAC3D,MAAMC,OAAO,GAAG;IACZ,QAAQ,EAAE;EACd,CAAC;EAED,OAAOuB,KAAK,CAAE,GAAExB,OAAQ,GAAEgC,EAAG,cAAa,EAAE;IAAE/B;EAAQ,CAAC,CAAC,CACnDwB,IAAI,CAACC,QAAQ,IAAI;IACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}