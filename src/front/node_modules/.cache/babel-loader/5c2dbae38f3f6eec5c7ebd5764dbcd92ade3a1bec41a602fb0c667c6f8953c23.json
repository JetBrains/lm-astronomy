{"ast":null,"code":"var _jsxFileName = \"/Users/sergo/Work/lm-astronomy/src/front/src/components/SearchPanel/SearchPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport './SearchPanel.css';\nimport { MessageContext } from '../Contexts/MessageContext';\nimport { useNavigate } from 'react-router-dom';\nimport ObjectSelect from '../ObjectSelect/ObjectSelect';\nimport MessengerType from '../MessengerType/MessengerType';\nimport SearchButton from \"../SearchButton/SearchButton\";\nimport { searchAPI } from \"../../api/apiCalls\";\nimport TransientInput from '../TransientInput/TransientInput';\nimport CoordinatesContext from '../Contexts/CoordinatesContext';\nimport { parseAndCleanCoordinates } from '../parseCoordinatesUtility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchPanel() {\n  _s();\n  const {\n    coordinates,\n    transient,\n    setTransient,\n    selectedMessenger,\n    setSelectedMessenger,\n    selectedObject,\n    setSelectedObject,\n    setCoordinates\n  } = useContext(CoordinatesContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const isDisabled = !transient && !selectedObject && !selectedMessenger && (!coordinates || coordinates[0] === null && coordinates[1] === null && coordinates[2] === null);\n  const {\n    setMessageIds\n  } = useContext(MessageContext);\n  const navigate = useNavigate();\n  const handleSearch = () => {\n    if (!transient && !selectedObject && !selectedMessenger && (!coordinates || coordinates[0] === null && coordinates[1] === null && coordinates[2] === null)) {\n      console.log(\"Поиск не выполнен: все поля пусты\");\n      return;\n    }\n    setIsLoading(true);\n    searchAPI(transient, selectedObject, selectedMessenger, coordinates).then(data => {\n      if (data && data.ATel && data.GCN) {\n        setMessageIds({\n          ATel: data.ATel,\n          GCN: data.GCN\n        });\n      } else {\n        console.log(\"Неправильный формат данных:\", data);\n      }\n      navigate(\"/message\");\n      setIsLoading(false);\n    }).catch(error => {\n      console.log(error);\n      setIsLoading(false);\n    });\n  };\n  const handleObjectChange = selectedObjectValue => {\n    setSelectedObject(selectedObjectValue);\n  };\n  const handleMessengerChange = selectedMessengerType => {\n    setSelectedMessenger(selectedMessengerType);\n  };\n  const parseCoordinates = inputString => {\n    const regex = /RA:\\s*(-?\\d+(\\.\\d+)?)\\s*,?\\s*DEC:\\s*(-?\\d+(\\.\\d+)?)\\s*,?\\s*ANG:\\s*(\\d+(\\.\\d+)?)/;\n    const match = regex.exec(inputString);\n    if (match) {\n      const ra = parseFloat(match[1]);\n      const dec = parseFloat(match[3]);\n      const ang = parseFloat(match[5]);\n      return [ra, dec, ang];\n    }\n    return [null, null, null];\n  };\n  const handleTransientChange = e => {\n    const inputString = e.target.value;\n    setTransient(inputString);\n  };\n  const handleTransientBlur = e => {\n    const inputString = e.target.value;\n    const {\n      ra,\n      dec,\n      ang,\n      text\n    } = parseAndCleanCoordinates(inputString);\n    if (ra !== null && dec !== null && ang !== null) {\n      setCoordinates([ra, dec, ang]);\n    }\n    setTransient(text); // Если вы хотите обновить transient с очищенным текстом\n  };\n\n  useEffect(() => {\n    if (coordinates && coordinates[0] !== 0 && coordinates[1] !== 0) {\n      const coordsString = `RA:${coordinates[0]} DEC:${coordinates[1]} ANG:${coordinates[2]}`;\n      const regex = /RA\\s*[:]*\\s*(-?\\d+(\\.\\d+)?)[\\s,]*|DEC\\s*[:]*\\s*(-?\\d+(\\.\\d+)?)[\\s,]*|ANG\\s*[:]*\\s*(-?\\d+(\\.\\d+)?)[\\s,]*/gi;\n      let cleanedTransient = transient.replace(regex, '').replace(/,{2,}/g, ',').trim();\n\n      // Удаляем концевые запятые и пробелы после очистки\n      cleanedTransient = cleanedTransient.replace(/^[\\s,]+|[\\s,]+$/g, '');\n      const newTransient = cleanedTransient ? `${cleanedTransient}, ${coordsString}` : coordsString;\n      setTransient(newTransient);\n    }\n  }, [coordinates]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-panel\",\n    children: [/*#__PURE__*/_jsxDEV(TransientInput, {\n      onTransientChange: handleTransientChange,\n      onBlur: handleTransientBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: /*#__PURE__*/_jsxDEV(ObjectSelect, {\n        onObjectChange: handleObjectChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: /*#__PURE__*/_jsxDEV(MessengerType, {\n        onMessengerChange: handleMessengerChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchButton, {\n      onSearch: handleSearch,\n      isLoading: isLoading,\n      isDisabled: isDisabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(SearchPanel, \"GI4k+rG7qdbgOEx2IS6XMlP0NH4=\", false, function () {\n  return [useNavigate];\n});\n_c = SearchPanel;\nexport default SearchPanel;\nvar _c;\n$RefreshReg$(_c, \"SearchPanel\");","map":{"version":3,"names":["React","useState","useEffect","useContext","MessageContext","useNavigate","ObjectSelect","MessengerType","SearchButton","searchAPI","TransientInput","CoordinatesContext","parseAndCleanCoordinates","jsxDEV","_jsxDEV","SearchPanel","_s","coordinates","transient","setTransient","selectedMessenger","setSelectedMessenger","selectedObject","setSelectedObject","setCoordinates","isLoading","setIsLoading","isDisabled","setMessageIds","navigate","handleSearch","console","log","then","data","ATel","GCN","catch","error","handleObjectChange","selectedObjectValue","handleMessengerChange","selectedMessengerType","parseCoordinates","inputString","regex","match","exec","ra","parseFloat","dec","ang","handleTransientChange","e","target","value","handleTransientBlur","text","coordsString","cleanedTransient","replace","trim","newTransient","className","children","onTransientChange","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","onObjectChange","onMessengerChange","onSearch","_c","$RefreshReg$"],"sources":["/Users/sergo/Work/lm-astronomy/src/front/src/components/SearchPanel/SearchPanel.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport './SearchPanel.css';\nimport { MessageContext } from '../Contexts/MessageContext';\nimport { useNavigate } from 'react-router-dom';\nimport ObjectSelect from '../ObjectSelect/ObjectSelect';\nimport MessengerType from '../MessengerType/MessengerType';\nimport SearchButton from \"../SearchButton/SearchButton\";\nimport {searchAPI} from \"../../api/apiCalls\";\nimport TransientInput from '../TransientInput/TransientInput';\nimport CoordinatesContext from '../Contexts/CoordinatesContext';\nimport { parseAndCleanCoordinates } from '../parseCoordinatesUtility';\n\n\n\nfunction SearchPanel() {\n    const {\n        coordinates,\n        transient,\n        setTransient,\n        selectedMessenger,\n        setSelectedMessenger,\n        selectedObject,\n        setSelectedObject,\n        setCoordinates\n    } = useContext(CoordinatesContext);\n    const [isLoading, setIsLoading] = useState(false);\n    const isDisabled = !transient && !selectedObject && !selectedMessenger && (!coordinates || (coordinates[0] === null && coordinates[1] === null && coordinates[2] === null));\n    const { setMessageIds } = useContext(MessageContext);\n    const navigate = useNavigate();\n    const handleSearch = () => {\n        if (!transient && !selectedObject && !selectedMessenger && (!coordinates || (coordinates[0] === null && coordinates[1] === null && coordinates[2] === null))) {\n            console.log(\"Поиск не выполнен: все поля пусты\");\n            return;\n        }\n        setIsLoading(true);\n            searchAPI(transient, selectedObject, selectedMessenger, coordinates)\n                .then((data) => {\n                    if (data && data.ATel && data.GCN) {\n                        setMessageIds({ ATel: data.ATel, GCN: data.GCN });\n\n                    } else {\n                        console.log(\"Неправильный формат данных:\", data);\n                    }\n                    navigate(\"/message\");\n                    setIsLoading(false);\n                })\n                .catch((error) => {\n                    console.log(error)\n                    setIsLoading(false);\n                })\n    };\n\n    const handleObjectChange = (selectedObjectValue) => {\n        setSelectedObject(selectedObjectValue);\n    };\n\n    const handleMessengerChange = (selectedMessengerType) => {\n        setSelectedMessenger(selectedMessengerType);\n    };\n    const parseCoordinates = (inputString) => {\n        const regex = /RA:\\s*(-?\\d+(\\.\\d+)?)\\s*,?\\s*DEC:\\s*(-?\\d+(\\.\\d+)?)\\s*,?\\s*ANG:\\s*(\\d+(\\.\\d+)?)/;\n        const match = regex.exec(inputString);\n\n        if (match) {\n            const ra = parseFloat(match[1]);\n            const dec = parseFloat(match[3]);\n            const ang = parseFloat(match[5]);\n\n            return [ra, dec, ang];\n        }\n\n        return [null, null, null];\n    };\n\n\n\n\n    const handleTransientChange = (e) => {\n        const inputString = e.target.value;\n        setTransient(inputString);\n    };\n\n\n    const handleTransientBlur = (e) => {\n        const inputString = e.target.value;\n        const { ra, dec, ang, text } = parseAndCleanCoordinates(inputString);\n        if (ra !== null && dec !== null && ang !== null) {\n            setCoordinates([ra, dec, ang]);\n        }\n        setTransient(text);  // Если вы хотите обновить transient с очищенным текстом\n    };\n\n\n    useEffect(() => {\n        if (coordinates && coordinates[0] !== 0 && coordinates[1] !== 0) {\n            const coordsString = `RA:${coordinates[0]} DEC:${coordinates[1]} ANG:${coordinates[2]}`;\n\n            const regex = /RA\\s*[:]*\\s*(-?\\d+(\\.\\d+)?)[\\s,]*|DEC\\s*[:]*\\s*(-?\\d+(\\.\\d+)?)[\\s,]*|ANG\\s*[:]*\\s*(-?\\d+(\\.\\d+)?)[\\s,]*/gi;\n            let cleanedTransient = transient.replace(regex, '').replace(/,{2,}/g, ',').trim();\n\n            // Удаляем концевые запятые и пробелы после очистки\n            cleanedTransient = cleanedTransient.replace(/^[\\s,]+|[\\s,]+$/g, '');\n\n            const newTransient = cleanedTransient ? `${cleanedTransient}, ${coordsString}` : coordsString;\n            setTransient(newTransient);\n        }\n    }, [coordinates]);\n\n\n\n    return (\n        <div className=\"search-panel\">\n            <TransientInput\n                onTransientChange={handleTransientChange}\n                onBlur={handleTransientBlur}\n            />\n            <div className=\"input-group\">\n                <ObjectSelect onObjectChange={handleObjectChange} />\n            </div>\n            <div className=\"input-group\">\n                <MessengerType onMessengerChange={handleMessengerChange} />\n            </div>\n            <SearchButton onSearch={handleSearch} isLoading={isLoading} isDisabled={isDisabled} />\n        </div>\n    );\n}\n\nexport default SearchPanel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}