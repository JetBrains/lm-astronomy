{"ast":null,"code":"export function searchAPI(transientName, physicalPhenomena, messengerType) {\n  // Define the base URL and headers\n  const baseURL = 'https://lm-astronomy.labs.jb.gg/api/search/'; // TODO: move to .env\n  const headers = {\n    'accept': 'application/json'\n  };\n  // if inputs are empty string, replace it with null\n\n  function constructURL(base, params) {\n    const filteredParams = Object.entries(params).filter(([key, value]) => value !== null);\n    if (!filteredParams.length) {\n      return base;\n    }\n    const queryString = new URLSearchParams(filteredParams).toString();\n    return `${base}?${queryString}`;\n  }\n  transientName = transientName || null;\n  physicalPhenomena = physicalPhenomena || null;\n  messengerType = messengerType || null;\n  let url = constructURL(baseURL, {\n    transient_name: transientName,\n    object_type: physicalPhenomena,\n    messenger_type: messengerType\n  });\n  console.log(url);\n\n  // Make the request\n  return fetch(url, {\n    headers\n  }).then(response => response.json()).then(data => {\n    console.log(data);\n    return data;\n  }).catch(error => {\n    console.error(\"Error making request:\", error);\n  });\n}","map":{"version":3,"names":["searchAPI","transientName","physicalPhenomena","messengerType","baseURL","headers","constructURL","base","params","filteredParams","Object","entries","filter","key","value","length","queryString","URLSearchParams","toString","url","transient_name","object_type","messenger_type","console","log","fetch","then","response","json","data","catch","error"],"sources":["/Users/sergo/Work/lm-astronomy/src/front/src/api/apiCalls.js"],"sourcesContent":["export function searchAPI(transientName, physicalPhenomena, messengerType) {\n    // Define the base URL and headers\n    const baseURL = 'https://lm-astronomy.labs.jb.gg/api/search/'; // TODO: move to .env\n    const headers = {\n        'accept': 'application/json'\n    };\n    // if inputs are empty string, replace it with null\n\n    function constructURL(base, params) {\n        const filteredParams = Object.entries(params).filter(([key, value]) => value !== null);\n        if (!filteredParams.length) {\n            return base;\n        }\n        const queryString = new URLSearchParams(filteredParams).toString();\n        return `${base}?${queryString}`;\n    }\n\n     transientName = transientName || null;\n     physicalPhenomena = physicalPhenomena || null;\n     messengerType = messengerType || null;\n\n\n    let url = constructURL(baseURL, {\n        transient_name: transientName,\n        object_type: physicalPhenomena,\n        messenger_type: messengerType\n    });\n\n    console.log(url);\n\n\n    // Make the request\n    return fetch(url, { headers })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data);\n            return data;\n        })\n        .catch(error => {\n            console.error(\"Error making request:\", error);\n        });\n}\n"],"mappings":"AAAA,OAAO,SAASA,SAASA,CAACC,aAAa,EAAEC,iBAAiB,EAAEC,aAAa,EAAE;EACvE;EACA,MAAMC,OAAO,GAAG,6CAA6C,CAAC,CAAC;EAC/D,MAAMC,OAAO,GAAG;IACZ,QAAQ,EAAE;EACd,CAAC;EACD;;EAEA,SAASC,YAAYA,CAACC,IAAI,EAAEC,MAAM,EAAE;IAChC,MAAMC,cAAc,GAAGC,MAAM,CAACC,OAAO,CAACH,MAAM,CAAC,CAACI,MAAM,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAKA,KAAK,KAAK,IAAI,CAAC;IACtF,IAAI,CAACL,cAAc,CAACM,MAAM,EAAE;MACxB,OAAOR,IAAI;IACf;IACA,MAAMS,WAAW,GAAG,IAAIC,eAAe,CAACR,cAAc,CAAC,CAACS,QAAQ,CAAC,CAAC;IAClE,OAAQ,GAAEX,IAAK,IAAGS,WAAY,EAAC;EACnC;EAECf,aAAa,GAAGA,aAAa,IAAI,IAAI;EACrCC,iBAAiB,GAAGA,iBAAiB,IAAI,IAAI;EAC7CC,aAAa,GAAGA,aAAa,IAAI,IAAI;EAGtC,IAAIgB,GAAG,GAAGb,YAAY,CAACF,OAAO,EAAE;IAC5BgB,cAAc,EAAEnB,aAAa;IAC7BoB,WAAW,EAAEnB,iBAAiB;IAC9BoB,cAAc,EAAEnB;EACpB,CAAC,CAAC;EAEFoB,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;;EAGhB;EACA,OAAOM,KAAK,CAACN,GAAG,EAAE;IAAEd;EAAQ,CAAC,CAAC,CACzBqB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACVN,OAAO,CAACC,GAAG,CAACK,IAAI,CAAC;IACjB,OAAOA,IAAI;EACf,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;IACZR,OAAO,CAACQ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EACjD,CAAC,CAAC;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}